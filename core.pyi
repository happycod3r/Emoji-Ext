from collections.abc import Callable
from typing_extensions import Literal, TypedDict
from typing import Iterator, Dict, List, Any
from .tokenizer import Token

class config:
    demojize_keep_zwj: bool
    replace_emoji_keep_zwj: bool

class _EmojiListReturn(TypedDict):
    emoji: str
    match_start: int
    match_end: int

def category_exists(category: str = ..., category_id: int = ...) -> bool: ...

def category(emoji: str) -> (Dict[str, int] | List[Dict[str, int]] | None): ...

def get_all_categories() -> Dict[Dict[str, int]]: ...

def top_level_categories() -> List[Dict[str, int]]: ...

def sub_level_categories() -> List[Dict[str, int]]: ...

def is_top_level_category(
    category: str = ...,
    category_id: int = ...
) -> (bool | None): ...

def parent_category(
    category: str = ...,
    category_id: int = ...    
) -> (str | None): ...

def child_categories(
    category: str = ...,
    category_id: int = ...,
    emojis_in_category: bool = ...
) -> (List[str] | None): ...

def iterate_category(
    func: object,
    func_args: List[str, int, Any] = ...,
    category: str = ...,
    category_id: int = ...
) -> (List[str] | None): ...

def emoji_factory(category: str = ..., category_id: int = ...) -> (str | None): ...

def get_emojis_in_category(category: str = ..., category_id: int = ...) -> List[str]: ...

def is_emoji_variation(emoji: str) -> (bool | None): ...

def get_all_emoji_variants() -> List[Dict[str, Any]]: ...

def emoji_to_unicode(emoji: str | List[str]) -> (str | List[str]): ...

def emoji_name(emoji: str) -> (str | None): ... 
def get_emoji_by_name(name: str) -> (str | None): ...
def has_zwj(text: str) -> (bool | None): ...

def emojize(
    string: str,
    delimiters: tuple[str, str] = ...,
    variant: Literal["text_type", "emoji_type", None] = ...,
    language: str = ...,
    version: float | None = ...,
    handle_version: str | Callable[[str, dict[str, str]], str] | None = ...,
) -> str: ...

def demojize(
    string: str,
    delimiters: tuple[str, str] = ...,
    language: str = ...,
    version: float | None = ...,
    handle_version: str | Callable[[str, dict[str, str]], str] | None = ...,
) -> str: ...

def analyze(string: str, non_emoji: bool,
            join_emoji: bool) -> Iterator[Token]: ...

def replace_emoji(string: str, replace: str | Callable[[
                  str, dict[str, str]], str] = ..., version: float 
                  = ...) -> str: ...

def emoji_list(string: str) -> list[_EmojiListReturn]: ...
def distinct_emoji_list(string: str) -> list[str]: ...
def emoji_count(string: str, unique: bool = ...) -> int: ...
def version(string: str) -> float: ...
def is_emoji(string: str) -> bool: ...
