import tkinter as tk
import customtkinter as ctk
import emoji

# Contains duplicate emojis for testing purposes.
test_emoji_str = "üôÇüòäüòÄüòÅüòÉüòÑüòéüòÜüòÇ‚òπÔ∏èüôÅüòûüòüüò£üòñüò¢üò≠ü•≤ü•πüòÇüò†üò°üò®üòßüò¶üò±üò´üò©üòÆüòØüò≤üò∫üò∏üê±üòºüòóüòôüòöüòòüòçüòâüòúüòòüòõüòùüòúü§ëü§îüòïüòüüòêüòëüò≥üòûüòñü§êüò∂üòáüëºüòàüòéüò™üòèüòíüòµüòµ‚Äçüí´üòïü§ïü§íüò∑ü§¢ü§®üò¨‚ò†Ô∏èüíÄüè¥‚Äç‚ò†Ô∏èüêîüêìüåπüéÖüíî‚ù§Ô∏èüêüüê†üçªü´°üòîü•∫üò≠üò¢üòµ‚ò†Ô∏èüò≥üò£ü¶Äü¶ûü¶àü©πü§ï‚ù§Ô∏è‚Äçü©πüêüüê†üíµüí∏üòèüòêüòëü§®ü¶áüòòüôÇüå∏üò≠üê±üêªüß∏üêª‚Äç‚ùÑÔ∏èüêºüò£üòñüë∂üòÖüò≥üòìüò•üò≥üö¨üò¥üí§üòâüòúüòïüò∂üòµüôÑüòÄüòÖüòÜüòÉüòÑüôåüôáüñïü§îüò≠üò¢üòíüò©üòëüòûüòîüò´üò©üò™üò∫üò∏üòπüòªüòºüòΩüôÄüòøüòæüê±üôçüòîü§≠üòïüòµü§¶üòÉüòÑüòÅüòÄüòçüëãüëΩüëæüòÄüôåüíÉüòÇ‚úåÔ∏èüòîüòíüòèüòôüòöüßêüéßüòüüòìüò¨ü§ìüòé‚úçÔ∏èüìùüòÄüòÅüòÜüòÖüòÉüòÑüòÅüò≤üòÆüòØüíÉüï∫üò®üò±üòÆüò≤üò¨üò†ü§∑ü´Çüòôüò¥üòåüò©üò´ü´ßüçµ‚òïÔ∏èüå†‚òÑÔ∏èüí´üåüüê†üêüüê°ü¶àüê¨üê≥üêãü¶ëüêôüêçüí£üß®üòÄüòÅüòÇüòÉüòÑüòÖüòÜüòáüòàüòâüòäüòãüòåüòçüòéüòèüòêüòëüòíüòìüòîüòïüòñüòóüòòüòôüòöüòõüòúüòùüòûüòüüôÄüôÅüôÇüôÉüôÑüôÖüôÜüôáüôàüôâüôäüôãüôåüôçüôéüôèüò∞üò±üò≤üò≥üò¥üòµüò∂üò∑üò∏üòπüò∫üòªüòºüòΩüòæüòøü§êü§ëü§íü§ìü§îü§ïü§ñü§óü§òü§ôü§öü§õü§úü§ùü§ûü§üü§†ü§°ü§¢ü§£ü§§ü§•ü§¶ü§ßü§®ü§©ü§™ü§´ü§¨ü§≠ü§Æü§Øü§∞ü§±ü§≤ü§≥ü§¥ü§µü§∂ü§∑ü§∏ü§∫ü§ªü§ºü§Ωü§æü§ø"

# Contains no duplicate emojis
clean_emoji_resource = [
    'üôÇ', 'üòä', 'üòÄ', 'üòÅ', 'üòÉ', 'üòÑ', 'üòé', 'üòÜ', 'üòÇ', 'üôÅ', 'üòû', 
    'üòü', 'üò£', 'üòñ', 'üò¢', 'üò≠', 'ü•≤', 'ü•π', 'üò†', 'üò°', 'üò®', 'üòß', 
    'üò¶', 'üò±', 'üò´', 'üò©', 'üòÆ', 'üòØ', 'üò≤', 'üò∫', 'üò∏', 'üê±', 'üòº', 
    'üòó', 'üòô', 'üòö', 'üòò', 'üòç', 'üòâ', 'üòú', 'üòõ', 'üòù', 'ü§ë', 'ü§î', 
    'üòï', 'üòê', 'üòë', 'üò≥', 'ü§ê', 'üò∂', 'üòá', 'üëº', 'üòà', 'üò™', 'üòè', 
    'üòí', 'üòµ', 'üí´', 'ü§ï', 'ü§í', 'üò∑', 'ü§¢', 'ü§®', 'üò¨', 'üíÄ', 'üè¥', 
    'üêî', 'üêì', 'üåπ', 'üéÖ', 'üíî', '‚ù§', 'üêü', 'üê†', 'üçª', 'ü´°', 'üòî', 
    'ü•∫', 'ü¶Ä', 'ü¶û', 'ü¶à', 'ü©π', 'üíµ', 'üí∏', 'ü¶á', 'üå∏', 'üêª', 'üß∏', 
    '‚ùÑ', 'üêº', 'üë∂', 'üòÖ', 'üòì', 'üò•', 'üö¨', 'üò¥', 'üí§', 'üôÑ', 'üôå', 
    'üôá', 'üñï', 'üòπ', 'üòª', 'üòΩ', 'üôÄ', 'üòø', 'üòæ', 'üôç', 'ü§≠', 'ü§¶', 
    'üëã', 'üëΩ', 'üëæ', 'üíÉ', '‚úå', 'üßê', 'üéß', 'ü§ì', '‚úç', 'üìù', 'üï∫', 
    'ü§∑', 'ü´Ç', 'üòå', 'ü´ß', 'üçµ', '‚òï', 'üå†', '‚òÑ', 'üåü', 'üê°', 'üê¨', 
    'üê≥', 'üêã', 'ü¶ë', 'üêô', 'üêç', 'üí£', 'üß®', 'üòã', ' üòê', 'üôÉ', 'üôÖ', 
    'üôÜ', 'üôà', 'üôâ', 'üôä', 'üôã', 'üôé', 'üôè', 'üò∞', 'ü§ñ', 'ü§ó', 'ü§ò', 
    'ü§ô', 'ü§ö', 'ü§õ', 'ü§ú', 'ü§ù', 'ü§û', 'ü§ü', 'ü§†', 'ü§°', 'ü§£', 'ü§§', 
    'ü§•', 'ü§ß', 'ü§©', 'ü§™', 'ü§´', 'ü§¨', 'ü§Æ', 'ü§Ø', 'ü§∞', 'ü§±', 'ü§≤', 
    'ü§≥', 'ü§¥', 'ü§µ', 'ü§∂', 'ü§∏', 'ü§∫', 'ü§ª', 'ü§º', 'ü§Ω', 'ü§æ', 'ü§ø']


ctk.set_appearance_mode("System")
ctk.set_default_color_theme("blue")

class EmojiPy(ctk.CTk):
    def __init__(self):

        self.EMOJIS = []
        self.EMOJI_NAMES = None

        self.width = 350
        self.height = 450
        super().__init__()
        self.geometry(f"{self.width}x{self.height}")
        self.title = "EmojiPy"
        self.grid_columnconfigure(0, weight=1)
        
        self.app_title = ctk.CTkLabel(self, width=200, text="EmojiPy", font=ctk.CTkFont("Segoi UI", 25, weight='bold'))
        self.app_title.grid(row=0, column=0, columnspan=3, padx=0, pady=(20, 20))
        self.app_title.grid_rowconfigure(0, weight=1)

        self.emoji_frame = ctk.CTkScrollableFrame(self, width=self.width)
        self.emoji_frame.grid(row=1, column=0, padx=10, pady=(20, 20))
        self.emoji_frame.grid_rowconfigure(0, weight=1)

        self.set_emoji_list()
        self.get_emoji_names_from_db()
        self.populate_gui()
        

    def populate_gui(self) -> None:
        """
        Loads and populates the GUI with the emojis after they have 
        been retrieved from the database. Each emoji is displayed
        on a label in a scrollable list
        """
        del self.EMOJIS[-5:] # temporary
        for i in range(len(self.EMOJIS)):
            if len(self.EMOJIS[i]) != 0:
                emoji_list_item = ctk.CTkLabel(self.emoji_frame)
                emoji_list_item.configure(   
                    text=f"{self.EMOJIS[i]}", 
                    anchor="w",
                    font=ctk.CTkFont(size=16), 
                    corner_radius=0
                )
                emoji_list_item.grid(
                    row=i, 
                    column=0, 
                    padx=(0, 0), 
                    pady=(0, 2),
                    ipadx=2,
                    ipady=2, 
                    sticky="ew"
                )
                emoji_list_item.grid_rowconfigure(i, weight=0) 

                emoji_item_name = ctk.CTkLabel(self.emoji_frame)
                emoji_item_name.configure(   
                    text=f"{self.EMOJI_NAMES[i]}", 
                    anchor="w",
                    font=ctk.CTkFont(size=16), 
                    corner_radius=0
                )
                emoji_item_name.grid(
                    row=i, 
                    column=1, 
                    padx=(0, 0), 
                    pady=(0, 2),
                    ipadx=2,
                    ipady=2, 
                    sticky="ew"
                )
                emoji_item_name.grid_rowconfigure(i, weight=0)
            
    def set_emoji_list(self) -> None:
        """
        Gets the emojis retrieved from the db, checks their validity and 
        appends each one to the EMOJI list.
        """
        emojis = self.get_emojis_from_db()
        for item in emojis:
            if emoji.is_emoji(item):
                self.EMOJIS.append(item)
    
    def get_emoji_names_from_db(self) -> list[str]:
        """
        Retrieves the stored shorthand version of the emojis from 
        the database to borrow the names from them to populate the
        GUI with.
        """
        try:
            with open("EMOJIS.db", "r") as db:
                content = db.read()
                db.close()
                names = content.split(":")
                actual_names = []
                for name in names:
                    if name != '':
                        actual_names.append(name)    
                self.EMOJI_NAMES = actual_names
        except FileNotFoundError as e:
            print(repr(e))
        except IOError as e:
            print(repr(e))     

    def get_emojis_from_db(self) -> str:
        """
        Retrieves the short hand emojis from the database, emojizes them and returns 
        the emoji string returned by emoji.emojize().
        """
        try:    
            with open("EMOJIS.db", "r") as db:
                content = db.read()
                db.close()
                emojis = emoji.emojize(content)
                return emojis
        except FileNotFoundError as e:
            print(repr(e))
        except IOError as e:
            print(repr(e))

    def add_emojis_to_db(self, emojis: list[str]):
        """
        Demojizes the list of emojis and appends them to the 
        database.
        """
        try:
            with open("EMOJIS.db", "a") as db:
                for item in emojis:
                    if emoji.is_emoji(item):
                        db.write(emoji.demojize(item))
                db.close()
        except FileNotFoundError as e:
            print(repr(e))
        except IOError as e:
            print(repr(e))
   
    def filter_emojis_from_text(self, text: str) -> list[str]:
        """
        Scans the text for emojis and if found they are appended to 
        the filtered list[] which is then returned.
        """
        filtered = []
        for item in emoji.distinct_emoji_list(text):
            if emoji.is_emoji(item):
                # Filter out unwanted unicode characters
                if item != "\u200d" and item != "Ô∏è" and item != "‚òπ" and item != "‚ò†":
                    filtered.append(item)
        return filtered
     
if __name__ == "__main__":   
    emojipy = EmojiPy()
    emojipy.mainloop()    
